BoundedContext Bookshopinventorytracking {
  description: "A web app that helps a bookshop manage its inventory, allowing booksellers to track books, add new ones, and remove discontinued or sold-out books. The main goal is to simplify inventory management for small bookshops."

  Aggregate Book {
    description: "Represents a book."
    root: Book
  }

  Entity Book {
    description: "An item in the shop’s inventory."
    attributes: {
      inventoryId: Text { required, unique. }
      title: Text { required, cannot be empty. }
      author: Text { required, cannot be empty. }
      publicationDate: Date { optional. }
      userId: Text { required, unique. }
      name: Text { required, cannot be empty. }
      email: Text { required, must be a valid email, unique. }
      roles: List of roles (e.g. { Admin, Regular User), required, at least one role. }
    }
    invariants: {
      I1: "Each book must have a unique inventory ID."
      I2: "Title and author cannot be empty."
      I3: "Email must be unique and a valid email format."
      I4: "A user must have at least one role."
    }
    behaviors: {
      Add book: "Needs inventory ID, title, author, publication date; adds the book to inventory."
      Remove book: "Needs inventory ID; removes the book from inventory."
      Assign role: "Needs a role (e.g., Admin, Regular User); adds the role to the user’s roles."
      Remove role: "Needs a role; removes the role, but the user must keep at least one role."
    }
  }

  ValueObject Role {
    description: "Represents a user role."
    attributes: {
      name: String
    }
    invariants: {
      I1: "name must be Admin or Regular User"
    }
    instances: {
      Admin: "Grants add/remove permissions"
      Regular User: "Grants view permissions"
    }
  }

  DomainService InventoryPermissionPolicy {
    description: "Manages permissions for inventory operations."
    behaviors: {
      canAddABook: Boolean
        description: "Checks if a user can add a book."
        rule: "True for ADMINS. role"
      canViewInventory: Boolean
        description: "Checks if a user can view inventory."
        rule: "True for Admin or Regular User roles"
      canRemoveABook: Boolean
        description: "Checks if a user can remove a book."
        rule: "True for ADMINS. role"
    }
  }

  Repository BookRepository {
    description: "Manages Book persistence."
    behaviors: {
      findById(inventoryId: Text): Book
      findAll(): List<Book>
      save(book: Book)
      delete(book: Book)
    }
  }

}
